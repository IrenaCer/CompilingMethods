<START> ::= <FUNCTIONS>

<FUNCTIONS> ::= <FUNCTION> | <FUNCTIONS> <FUNCTION>

<FUNCTION> ::= <TYPE> <IDENT> <PARAMS> <BLOCK_STMT>
<TYPE> ::=  "int" | "bool" | "char" | "string" | "float" | "void"
<PARAMS> ::= "(" ")" | "(" <PARAM_LIST> ")"
<PARAM_LIST> ::= <PARAM_DECL> | <PARAM_LIST> "," <PARAM_DECL>
<PARAM_DECL> ::= <TYPE> <IDENT>

<STATEMENTS> ::= <STMT> | <STATEMENTS> <STMT>
<STMT> ::= <EXP_STMT> | <RETURN_STMT> | <BREAK_STMT> | <IF_STMT> | <VAR_DECL> | <VAR_ASGN> | <IO_STMT>
<RETURN_STMT> ::= "return" ";" | "return" <EXP> ";"
<BREAK_STMT> ::= "break" ";"
<CONTINUE_STMT> ::= "continue" ";"

<BLOCK_STMT> ::= "{" <STATEMENTS> "}" | "{" "}"
<IF_STMT> ::= "if" "(" <EXP> ")" <BLOCK_STMT>
			| "if" "(" <EXP> ")" <BLOCK_STMT> <ELIF>
            | "if" "(" <EXP> ")" <BLOCK_STMT> "else" <BLOCK_STMT>
            |"if" "(" <EXP> ")" <BLOCK_STMT> <ELIF> "else" <BLOCK_STMT>
<ELIF> ::= "elseif" "(" <EXP> ")" <BLOCK_STMT>|
            <ELIF>"elseif" "(" <EXP> ")" <BLOCK_STMT>
<WHILE_STMT> ::= "while" "(" <EXP> ")" <BLOCK_STMT>

<VAR_DECL> ::= <TYPE> <IDENT> ";"| <TYPE> <VAR_ASGN>
<VAR_ASGN> ::= <IDENT> "=" <EXP_STMT>

<COMMENT> ::= "//" <STR>
<ML_COMMENT> ::= "/*" <STRINGS> "*/"
<STRINGS> ::= <STR> | <STRINGS> <STR>

<IO_STMT> ::= <INPUT> | <OUTPUT>
<INPUT> ::= "read" "(" <IDENT> ")" ";"
<OUTPUT> ::= "write" "(" <EXP> ")" ";"

<EXP_STMT> ::= <EXP> ";"
<EXP> ::= <NOT>
<NOT> ::= <LOG> | "!" <LOG> | 
<LOG> ::= <COMP> | <LOG> "||" <COMP> | <LOG> "&&" <COMP>
<COMP> ::= <ADD_SUB> | <COMP> <COMP_OP> <ADD_SUB>
<ADD_SUB> ::= <MULT_DIV> | <ADD_SUB> "+" <MULT_DIV> | <ADD_SUB> "-" <MULT_DIV>
<MULT_DIV> ::= <POW> | <MULT_DIV> "*" <POW> | <MULT_DIV> "/" <POW>
<POW> ::= <PRIMARY> | <POW> "^" <PRIMARY>

<PRIMARY> ::= <INT> | <PAREN> | <IDENT> | <BOOL> | <CHAR> | <STR> | <FLOAT> | <FUNCTION>
<PAREN> ::= "(" <EXP> ")"

<IDENT> ::= <LETTER> | <IDENT> <LETTER> | <IDENT> <DIGIT> | "_" <IDENT> | <IDENT> "_"

<DIGIT> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<DIGITS> ::= <DIGIT> | <DIGITS> <DIGIT>

<INT> ::= <DIGITS>

<FLOAT> ::= <DIGITS> | <DIGITS> <FLOAT_REM>
<FLOAT_REM> ::=  "." <DIGITS> | "." <DIGITS> <EXPONENT>
<EXPONENT> ::= "e" <DIGITS> | "e-"<DIGITS>

<BOOL> ::= "true" | "false"
<COMP_OP> ::= ">" | "<" | ">=" | "<=" | "==" | "!=" 

<LETTER> ::= <U_LETTER> | L_LETTER
<CHAR> ::= "'" <LETTER> "'" | "'" <DIGIT> "'" |  "'" <SYM> "'" 
<CHARACTER> ::= <LETTER> | <DIGIT> |<SYM> | <N>
<CHARACTERS> ::= <CHARACTER> | <CHARACTERS> <CHARACTER>
<STR> ::= '"' '"' | '"' <CHARACTERS> '"' 

<U_LETTER> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | 
             "H" | "I" | "J" | "K" | "L" | "M" | "N" | 
             "O" | "P" | "Q" | "R" | "S" | "T" | "U" | 
             "V" | "W" | "X" | "Y" | "Z" ;
<L_LETTER> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" |
             "h" | "i" | "j" | "k" | "l" | "m" | "n" |
             "o" | "p" | "q" | "r" | "s" | "t" | "u" |
             "v" | "w" | "x" | "y" | "z" ;
<SYM> ::= "|" | "!" | "#" | "$" | "%" | "&" | "(" | ")" |
             "*" | "+" | "," | "-" | "." | "/" | ":" | ">" |
             "=" | "<" | "?" | '@' | "[" | "'\'" | "]" |
             "^" | "_" | "`" | "{" | "}" | "~"
<N> ::= "\n"

int main (int c)
{
    int a = 0;
    int b;

    string s = "wasd";
    read (b);
    while (true)
    {
        if(b > a){
            break;
        }
        elseif(a == b){
            a = a^2;
        }
        else{
            a = a - 3 * b;
            return;
        }
    }
    write(b-1);
    return(b);
}